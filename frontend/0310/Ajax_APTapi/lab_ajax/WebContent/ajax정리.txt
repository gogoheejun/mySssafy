1. Ajax를 사용하게 된 배경
웹이 발달하기 시작하면서, 기존의 HTML로만 웹을 사용하는 사용자를 만족시키기 어려워졌습니다. 
그래서 플래시, 액티브 X 등이 보편적으로 사용되어져 왔습니다. 
화려하지만 무거운 플래시 를 통해 화려한 그래픽 효과, 그리고 인터랙티브한 사용자 UI를 쉽게 
웹 페이지에 추가할 수 있었습니다.
예를 들어, 여름 휴가철에 자주 찾게 되는 펜션 홈페이지를 가면 다양한 꽃 그림과 함께 플래시로 제작한 
화려한 그래픽들을 감상할 수 있습니다.
플래시는 화려한 대신, 추가 소프트웨어를 설치해야 하고, 자체가 매우 무거워 웹 속도를 느리게 합니다. 
또 CPU 리소스를 많이 잡아 먹고, HTML과 다르게 수정도 어렵습니다. 
그러나 한국 웹페이지들(특히 쇼핑몰 사이트)의 플래시 의존도가 매우 높기 때문에, 플래시 플레이어를 
설치하지 않고 웹 서핑을 하는 것 또한 쉽지 않습니다.
(애플 iPhone을 사용하다 보면 종종 이러한 고충을 느낄 수 있습니다.)

추가 설치가 부담스러운 액티브 X
현재도 대한민국 대부분의 쇼핑몰, 금융 기관, 관공서 등에서 신용카드 결제, 인터넷 뱅킹, 증명서 출력 
등등에 액티브 X의 설치를 요구합니다.
그렇다고 모두 통일한 액티브 X를 쓰는 것이 절대 아니라서, 여러 사이트를 사용하기 위해선 수십 개의 
액티브 X를 설치해야 합니다. 뿐만 아니라, 인터넷 익스플로러가 아닌 다른 환경을 지원하지 않습니다.

플래시와 액티브 X의 장점을 모두 가진 Ajax
Ajax는 브라우저와 서버의 통신을 추가 소프트웨어 없이 가능케 하기 때문에, 액티브 X가 가진 강력한 
기능과 보안 성능을 모두 구현할 수 있습니다. 아마존을 비롯한 대부분의 미국 쇼핑 사이트에서는 
이미 Ajax를 이용한 결제를 오래 전부터 사용하고 있습니다.

또한 Ajax를 사용하면 페이지 리로딩 없이 서버에서 정보를 읽어와 페이지에 표시할 수 있다.
또한, Ajax 기술과 Javascript, HTML5 등의 기술을 통해 플래시를 사용하지 않고, 
그래픽 효과를 구현할 수 있습니다. 

구글 Maps API 역시 대표적으로 Ajax를 이용해 개발된 사례입니다. 
그렇기 때문에 모드 기능이 사용자와 상호작용을 통해 페이지 새로고침 없이 실시간으로 지원됩니다. 
현재는 구글 어쓰(Google Earth) 기능까지 별도의 소프트웨어 없이 웹 상에서 구현되고 있습니다

2.  Ajax(Asynchronous Javascript + XML)의 개요
   ① javascript에 의한 비동기적인(Asynchronous)통신으로 XML기반의 데이터를 클라이언트인 
       웹 브라우저와 서버 사이에서 교환하는 방법이다.
   ② 기존의 웹 방식과 달리 특별한 프로그램의 설치없이 사용자에게 즉각적인 반응과 풍부한 UI경험을 
       제공하는 새로운 방식의 기술이다. 이 방식은 ActiveX와 같은 설치 없이 웹브라우저가 제공하는 
       기본 기능만으로 구현된다

3. Ajax의  4가지 구성요소
   : 자바스크립트 , XMLHttpRequest,  DOM , CSS

① 자바스크립트 : 
      유저 이벤트 처리 - 사용자가 마우스를 드래그 하거나, 버튼을 클릭하면, XMLHttpRequest객체를 사용해서
      웹 서버에 요청을 전송한다. 또한 XMLHttpRequest 객체로부터 응답이 오면 DOM, CSS등을 사용해서 화면을 조작한다.
② XMLHttpRequest : 
       서버와 데이터 교환 - 웹서버와 통신을 담당한다. 사용자의 요청을 웹 서버에 전달하고,
       웹 서버로부터 받은 결과를 웹 브라우저에 전달한다.
③ DOM(Document Object Model) : 
       문서 정보(폼 등)-문서의 구조를 나타낸다. 폼등의 정보나 화면 구성을 조작할 때 사용된다.
④ CSS : 
       UI 구성 - 글자 색, 배경색, 위치, 투명도 등 UI와 관련된 부분을 담당한다.

4. XMLHttpRequest
 ① Ajax에서 서버와 클라이언트간에 통신을 담당하는것으로 가장 중요한 객체이다.
 ② 서버의 응답결과가 HTML이 아닌 XML 또는 단순 텍스트이다.
 ③ 페이지 이동없이 결과가 해당 화면에서 바로 반영된다

 (1) 객체 프러퍼티
 onreadystatechange : 상태의 변경이 발생했을때 이벤트를 처리하기 위해 이벤트 핸들러를 기술한다
                                 일반적으로 이벤트 핸들러는 자바스크립트의 함수로 기술된다.
 requestText : 문자열로 이루어진 서버의 응답을 받는다
 status : 서버로부터 응답받는 HTTP상태코드로 숫자를 리턴한다
           200 : 정상(ok)
           404 : 요청한 페이지를 찾을수 없음(page not found)
           500 : 서버에러(Internal Server Error)
           (대표적으로 2xx는 성공을, 4xx는 클라이언트 오류, 5xx는 서버의 오류를 나타냄)
 readyState : 요청객체의 상태를 리턴
             0: uninitialized - open() 메서드가 아직 호출되지 않은상태
             1: open - send() 메서드가 아직 호출되지 않은 상태
             2: sent - send()메서드의 호출이 끝나서, 헤더와 status의 사용이 가능한 상태이며 로드완료
             3: receiving - 일부 데이터를 받을수 있는상태로 처리 중
             4: loaded - 모든 데이터를 받을수 있는 상태로 완료
              
             [상수값]
             0(UNSENT)
             1(OPEND)
             2(HEADERS_RECEIVED)
             3(LOADING)
             4(DONE)

 requestXML : XML로 이루어진 서버의 응답을 받는다. 
                    이 프로퍼티는 파싱이 가능한 W3C DOM노드 트리구조의 메소드와
                    프로퍼티를 XML 문서 객체로 리턴 받는다.
  statusText : 서버로부터 HTTP상태를 문자로 리턴 받는다.
                  예를들어 "Not Found", "OK" 같은 문자열로 리턴된다.

 (2) XMLHttpRequest를 이용한 웹 서버 요청기술 
     * open()함수 : 요청의 초기화, get, post 선택, 접속할 URL입력
     * send() 함수 : 웹 서버에 요청

      ex) get 방식 전달
           httpRequest = getXMLHttpRequest();
           httpRequest.open("GET","text.txt",true); 
           세개의인자:1.get or post, 2.접속할URL, 3.동기(false)/비동기(true) 방식 지정
           (2의 URL은 보안상 이유로 접속할 URL은 현재 페이지와 같은 도메인에 있어야한다)
            또는   
            httpRequest.open("GET","test.jsp?id=raeok&pwd=1234",true);
            httpRequest.send(null);

      ex) post방식 전달
           httpRequest = getXMLHttpRequest();
           httpRequest.open("POST","text.jsp",true);
           httpRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded")
           httpRequest.send("id=raeok&pwd=1234");

5. DOM(Document Object Model)
   : html, xml과 같은 전자문서의 모든 요소를 객체로 간주한 모델
      (HTML을 많은 언어들이 제어할 수 있도록 문서를 객체화 시켜놓은 모델)
    ① DOM을 이해하는 모든 언어로 전자문서를 마음대로 제어할수 있다.(동적으로 제어가능)
    ② DOM을 이용하여 페이지의 자료를 스크립트로 접근이 가능하다
    ③ HTML과 XML문서는 DOM트리로 표현이 가능하다. 
    ④ 트리에 DOM API를 통하여 각각의 Element들에 접근이 가능하다

(1) Node인터페이스의 주로 프로퍼티
    프로퍼티 타입	프로퍼티 이름	설  명
    -----------------------------------------------------------
    String	               nodeName	노드의 이름
    String	               nodeValue 	노드의 값
    Unsigned short	  nodeType	노드 타입
    Node	               parentNode	부모 노드
    NodeList	  childNodes	자식 노드 목록
    Node	               firstChild	첫번째 자식 노드
    Node	               lastChild	마지막 자식 노드
    Node	               previousSibling	현재노드와 같은 부모를 갖는 자식노드중 현재 노드이전의 자식 노드
    Node	               nextSibling	현재노드와 같은 부모를 갖는 자식노드중 현재 노드다음의 자식 노드
    Document	  ownerDocument	이 노드가 포함된 Document 객체


6. JSON(Javascript Object Notation)
    : 저중량(lightweight)데이터 교환형식으로 사용자가 읽고 쓰기 쉬운형식으로 이루어져 있다. 
     따라서 컴퓨터 시스템이 파싱하고 생성하기 쉽다.
    ① JSON은 자바스크립트를 기반으로 만들어졌으니 완벽하게 특정 언어에 독립적인 텍스트 형식을 가지고 있다
    ② JSON 객체는 순서가 없는 이름/값의 쌍(pair)으로 이루어 졌다.
       이 객체는 {(left brace)로 시작해서(right brace)}로 끝난다. 
       이름 다음에는 : (colon)이 표시되고 값을 기술한다
       각각의 이름과 값의 쌍은 , (comma)로 구분해서 기술한다
       이름은 문자열로 이루어지기 때문에 " "로 둘러싸서 표시한다 

      ex)  JSON형태를 작성
            (1) 객체
                 {"이름1":"값1", "이름2":"값2"}
                 ex) var subject 
                         = { "codeNumber" : 101 , "titleName" : JAVA , "roomNumber" : 705 }    
            (2) 배열
                 [{"이름1":"값1", "이름2":"값2"}, {"이름1":"값1", "이름2":"값2"}]
                 ex) var subject = 
                            [{ "codeNumber" : 101 , "titleName" : JAVA , "roomNumber" : 705} ,
                              {"codeNumber" : 102 , "titleName" : JSP , "roomNumber" : 707 }]      
